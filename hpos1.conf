<Directory "/apps/apache2/htdocs">
    Options FollowSymLinks
    AllowOverride None
    Require all granted
</Directory>

Listen 9443
<VirtualHost *:9443>

	#  General setup for the virtual host
	ServerName hpos1.qawesternunion.com:443
	ServerAlias hpos1.qawesternunion.com
	ServerAdmin itio-run@westernunion.com
 	
	
	#DirectoryIndex index.html

	#LogLevel info proxy:debug
	ErrorLog "| /usr/sbin/rotatelogs -l  /apps/apache2/logs/hpos1_error.%Y-%m-%d 86400"
	TransferLog "| /usr/sbin/rotatelogs -l /apps/apache2/logs/hpos1_access.%Y-%m-%d 86400"

        DocumentRoot /apps/apache2/htdocs/hpos1
		
	<Directory "/apps/apache2/htdocs/hpos1/tablet-ui">
		    <FilesMatch "\.(css|png|jpg|woff|gif|gz|html|woff2|js)$">
				ExpiresActive On
				ExpiresDefault "access plus 1 day"
			</FilesMatch>
            <FilesMatch "^(index.html|version.json|transaction-details.json|jquery.nepaliDatePicker.min.js.gz|moment-with-locales.min.js.gz|jquery-1.12.4.min.js.gz|jquery.nepaliDatePicker.min.js|moment-with-locales.min.js|jquery-1.12.4.min.js)$">
                FileETag None
                Header unset ETag
                Header set Cache-Control "max-age=0, no-cache, no-store, must-revalidate"
                Header set Pragma "no-cache"
                Header set Expires "-1"
            </FilesMatch>
			
			#Gzip settings for different browsers
			AddEncoding gzip .gz
			
			RewriteEngine on
			# serve gzip .css files
			RewriteCond %{HTTP:Accept-encoding} gzip
			RewriteCond %{REQUEST_FILENAME}\.gz -s
			RewriteRule ^(.*)\.css $1\.css\.gz [QSA]
			
			## serve gzip .js files 
			RewriteCond %{HTTP:Accept-encoding} gzip
			RewriteCond %{REQUEST_FILENAME}\.gz -s
			RewriteRule ^(.*)\.js $1\.js\.gz [QSA]
			
			## serve gzip .html files 
			RewriteCond %{HTTP:Accept-encoding} gzip
			RewriteCond %{REQUEST_FILENAME}\.gz -s
			RewriteRule ^(.*)\.html $1\.html\.gz [QSA]
			
			## serve correct content types, and prevent mod_deflate double gzip
			RewriteRule \.css\.gz$ - [T=text/css,E=no-gzip:1,E=is_gzip:1]
			RewriteRule \.js\.gz$ - [T=text/javascript,E=no-gzip:1,E=is_gzip:1]
			RewriteRule \.html\.gz$ - [T=text/html,E=no-gzip:1,E=is_gzip:1]
			
			Header set Content-Encoding "gzip" env=is_gzip
    </Directory>

        #For WUPOS Receipts
        AddDefaultCharset UTF-8
		
        #For Cross Domain issue
        #Header set Access-Control-Allow-Origin "*.westernunion.*"

        #<IfModule mod_headers.c>
       # SetEnvIfNoCase Origin "https://(hpos1.qawesternunion.com|hpos2.qawesternunion.com|retailauth.qawesternunion.com)$" QA=$0
        #Header set Access-Control-Allow-Origin %{QA}e env=QA
        #</IfModule>
		#Header set Access-Control-Allow-Origin "*.qawesternunion.*"
		#Header set Access-Control-Allow-Origin "https://hpos1.qawesternunion.com"
		Header set Access-Control-Allow-Origin "*"
        Header set Access-Control-Allow-Headers "X-Requested-With,x-prototype-version,content-Type"
        Header set Access-Control-Allow-Methods "GET, POST, OPTIONS"
        Header set Access-Control-Request-Headers "X-Requested-With,x-prototype-version,accept,content-type"
		Header always set X-Frame-Options "SAMEORIGIN"
		
		

	 #Disable TRACE and TRACK OPTIONS      
      RewriteEngine On       
	RewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK) 
        RewriteRule .* - [F]

#        SSLEngine on


        #Fix for jetty getScheme
        RequestHeader set X-Forwarded-Proto "https"
		
        #Header set Content-Security-Policy "default-src 'self' 'unsafe-eval' https://127.0.0.1:* wss://127.0.0.1:* 'unsafe-inline' ;frame-src 'self' https://locations.westernunion.com ; img-src 'self' https://127.0.0.1:* https://localhost:* wss://127.0.0.1:* data:; style-src 'self' 'unsafe-inline'; object-src 'self' blob:; report-uri /web-service/rest/logger/report; script-src 'self' https://cdn.quantummetric.com 'unsafe-eval' 'unsafe-inline' https://localhost:* "
        Header set Content-Security-Policy "default-src 'self' 'unsafe-eval' https://127.0.0.1:* http://localhost:* http://127.0.0.1:* wss://127.0.0.1:* wss://localhost:* http://*.pinpadpre.local:* https://*.pinpadpre.local:* https://*.pinpad.local:* https://*.pinpad.local:* https://agentpc.westernunion.com:* https://agent-services-qa.useast1.digitalnonprod.awswuintranet.net:* https://agent-services-dev.useast1.digitalnonprod.awswuintranet.net https://127.0.0.1:* http://127.0.0.1:* https://siteintercept.qualtrics.com:* https://experience.westernunion.com:* https://zn5ydlsbwpgrsccsp-qps.siteintercept.qualtrics.com:* https://zn3fm6loz8iowjao5-wuvoc.siteintercept.qualtrics.com:* https://wu.oktapreview.com:* https://workspace.openfin.co:* https://*.openfin.co:* ingest.openfin.co 'unsafe-inline'; frame-src 'self' https://locations.westernunion.com https://location.westernunion.com https://*.sf.intra.laposte.fr https://www3.westernunion.com;frame-ancestors 'self' https://127.0.0.1:* http://localhost:* http://127.0.0.1:* wss://127.0.0.1:* wss://localhost:* http://*.pinpadpre.local:* https://*.pinpadpre.local:* https://*.pinpad.local:* https://*.pinpad.local:* https://agentpc.westernunion.com:* https://agent-services-dev.useast1.digitalnonprod.awswuintranet.net wupos2-app.quantummetric.com rl.quantummetric.com ingest.quantummetric.com https://127.0.0.1:* https://siteintercept.qualtrics.com:* https://experience.westernunion.com:* https://zn5ydlsbwpgrsccsp-qps.siteintercept.qualtrics.com:*  https://zn3fm6loz8iowjao5-wuvoc.siteintercept.qualtrics.com:* http://127.0.0.1:* https://10.44.32.201:* https://10.44.32.202:* https://10.44.32.200:*  https://wuposlbuat.westernunion.com/* https://wuposlbwuat.westernunion.com/* https://cdn.quantummetric.com ; img-src 'self' https://127.0.0.1:* https://localhost:* wss://127.0.0.1:* http://*.pinpadpre.local:* https://*.pinpadpre.local:* https://*.pinpad.local:* https://*.pinpad.local:* https://wuvoc.sjc1.qualtrics.com:* https://sjc1.qualtrics.com:* data:; style-src 'self' 'unsafe-inline'; object-src 'self' blob:; report-uri /web-service/rest/logger/report; script-src 'self' https://cdn.quantummetric.com https://siteintercept.qualtrics.com:* https://experience.westernunion.com:* https://zn5ydlsbwpgrsccsp-qps.siteintercept.qualtrics.com:* https://zn3fm6loz8iowjao5-wuvoc.siteintercept.qualtrics.com:* 'unsafe-eval' 'unsafe-inline' https://localhost:* ; worker-src 'self' https://workspace.openfin.co:* https://*.openfin.co:* ingest.openfin.co blob:; "
	
	RewriteEngine On
        #RewriteRule    ^/instance/(.*)$ /tablet-ui/index.html;JSESSIONID=$1 [R] [E=EMPTY_SESSION_COOKIE:true]
        RequestHeader unset Cookie env=EMPTY_SESSION_COOKIE

        #Fix for null sslsession in F5
        RewriteEngine on
        RewriteCond %{QUERY_STRING} subject=CN%3D(.*)%2C(.*)OU%3D(.*)
        RewriteRule .* - [E=CN_VAR:%1]         
        RequestHeader set ClientCert-Subject "CN=%{CN_VAR}e" env=CN_VAR
        Header add Set-Cookie "CERTCHECK_WUTA=%{CN_VAR}e ; Path=/; HttpOnly" env=CN_VAR

        
        RewriteEngine On
        RewriteCond %{HTTP:Cookie} (^|;\ *)CERTCHECK_WUTA=([^;\ ]+)
        RewriteRule .* - [E=WUTA_COOKIE:%2]
        RequestHeader set ClientCert-Subject "CN=%{WUTA_COOKIE}e" env=WUTA_COOKIE

        #Rewrite Index URL
        RewriteRule ^/tablet-ui/(.*)$ /tablet-ui/$1 [L,NC,QSA,PT]
        RewriteRule ^/web-service/(.*)$ /web-service/$1 [L,NC,QSA,PT]
        RewriteRule ^/ui/(.*)$ /ui/$1 [L,NC,QSA,PT]
		RewriteRule ^/SureRoute/(.*)$ /SureRoute/$1 [L,NC,QSA,PT]
        RewriteRule ^/dynamsgimages/(.*)$ /dynamsgimages/$1 [L,NC,QSA,PT]
        RewriteRule ^/checker/(.*)$ /checker/$1 [L,NC,QSA,PT]
        RewriteRule ^/custhelp-en/(.*)$ /custhelp-en/$1 [L,NC,QSA,PT]
        RewriteRule ^/custhelp-es/(.*)$ /custhelp-es/$1 [L,NC,QSA,PT]
        RewriteRule ^/longform/(.*)$ /longform/$1 [L,NC,QSA,PT]
        RewriteRule ^/balancer-manager/(.*)$ /balancer-manager/$1 [L,NC,QSA,PT]
        RewriteRule ^/server-status(.*)$ /server-status$1 [L,NC,QSA,PT]
		RewriteRule ^/idcapture/(.*)$ /idcapture/$1 [L,NC,QSA,PT]
		#RewriteRule ^/volumedashboard-service/(.*)$ /volumedashboard-service/$1 [L,NC,QSA,PT]
		#RewriteRule ^/GMTClient/(.*)$ /GMTClient/$1 [L,NC,QSA,PT]
		#RewriteRule ^/GMT_Services/(.*)$ /GMT_Services/$1 [L,NC,QSA,PT]
		RewriteRule ^/GMTClient/(.*)$ /GMTClient/$1 [L,NC,QSA,PT]
		RewriteRule ^/GMTServices/(.*)$ /GMTServices/$1 [L,NC,QSA,PT]
        #RewriteRule ^/(.*)$ /web-service/$1 [L,R]
        RewriteRule ^/wuxbr(.*)$ /wuxbr$1 [L,NC,QSA,PT]
        #RewriteRule ^/$ /web-service/ [L,R]
		RewriteRule ^/qscripts/hgql(.*)$ /hgql$1 [L,NC,QSA,PT]
		RewriteRule ^/qscripts/(.*)$ /qscripts/$1 [L,NC,QSA,PT]
		RewriteRule ^/quantummetric(.*)$ /hash$1 [L,NC,QSA,PT]
		RewriteRule ^/quantummetric(.*)$ /quantummetric$1 [L,NC,QSA,PT]
		RewriteRule ^/volumedashboard/(.*)$ /volumedashboard/$1 [L,NC,QSA,PT]
		RewriteRule ^/volumedashboard-ui(.*)$ /volumedashboard-ui$1 [L,NC,QSA,PT]
		RewriteRule ^/volumedashboard-service/(.*)$ /volumedashboard-service/$1 [L,NC,QSA,PT]
		RewriteRule ^/apac(.*)$ /apac$1 [L,NC,QSA,PT]
		RewriteRule ^/ec(.*)$ /ec$1 [L,NC,QSA,PT]
		RewriteRule ^/italy(.*)$ /italy$1 [L,NC,QSA,PT]
		RewriteRule ^/laca(.*)$ /laca$1 [L,NC,QSA,PT]
		RewriteRule ^/middleeast(.*)$ /middleeast$1 [L,NC,QSA,PT]
		RewriteRule ^/nam(.*)$ /nam$1 [L,NC,QSA,PT]
		RewriteRule ^/ovv(.*)$ /ovv$1 [L,NC,QSA,PT]
		RewriteRule ^/usest(.*)$ /usest$1 [L,NC,QSA,PT]
		RewriteRule ^/uscst(.*)$ /uscst$1 [L,NC,QSA,PT]
		RewriteRule ^/uspst(.*)$ /uspst$1 [L,NC,QSA,PT]
		RewriteRule ^/us(.*)$ /us$1 [L,NC,QSA,PT]
		RewriteRule ^/care(.*)$ /care$1 [L,NC,QSA,PT]
		RewriteRule ^/terms(.*)$ /terms$1 [L,NC,QSA,PT]
		RewriteRule ^/faces(.*)$ /faces$1 [L,NC,QSA,PT]
		RewriteRule ^/javascript(.*)$ /javascript$1 [L,NC,QSA,PT]

	ProxyPreserveHost   On
        #ProxyPassMatch ^/tablet-ui !
        ProxyPassMatch ^/web-service/deviceauthority/ !
        ProxyPass /web-service balancer://hpos1/web-service stickysession=JSESSIONID|jsessionid scolonpathdelim=On
		
		ProxyPass /dynamsgimages http://10.45.217.84:8080/dynamsgimages
        ProxyPassReverse /dynamsgimages http://10.45.217.84:8080/dynamsgimages

        <Proxy balancer://hpos1>
	   ProxySet lbmethod=byrequests
           BalancerMember https://10.45.235.173:8180 route=qa1 retry=1
        </Proxy>
        ProxyPassReverse    /web-service https://10.45.235.173:8180/web-service

	ProxyPassMatch ^/wuxbr(.*) https://172.31.8.83/wuxbr$1
        ProxyPassReverse /wuxbr https://172.31.8.83:443/wuxbr

		ProxyPass /hgql https://agent-services-dev.useast1.digitalnonprod.awswuintranet.net/hgql/
		ProxyPassReverse /hgql https://agent-services-dev.useast1.digitalnonprod.awswuintranet.net/hgql/

        ProxyPass /PartnerPortal https://10.45.235.173:8180/PartnerPortal
        ProxyPassReverse /PartnerPortal https://10.45.235.173:8180/PartnerPortal

		ProxyPass /qscripts https://corefwuatprxy.prod.wudip.com/qscripts2
		ProxyPassReverse /qscripts https://corefwuatprxy.prod.wudip.com/qscripts2

		ProxyPass /quantummetric  https://corefwuatprxy.prod.wudip.com/quantummetric2
		ProxyPassReverse /quantummetric https://corefwuatprxy.prod.wudip.com/quantummetric2
		
		ProxyPass /hash  https://corefwprxy.prod.wudip.com/quantumcheck
		ProxyPassReverse /hash https://corefwprxy.prod.wudip.com/quantumcheck

		#ProxyPass /idcapture https://wuidcapture.uat.cloud.wuintranet.net/idcapture
		#ProxyPassReverse /idcapture https://wuidcapture.uat.cloud.wuintranet.net/idcapture
        
        SSLProxyEngine On
        ProxyRequests Off	
	SSLProxyVerify none
        SSLProxyCheckPeerCN Off
        SSLProxyCheckPeerName off
        SSLProxyCheckPeerExpire  Off


	#<Proxy balancer://idc1cluster>
   	#  ProxySet lbmethod=byrequests
   	#  BalancerMember https://10.45.235.144:8443 loadfactor=1 route=idcqa1 retry=1
  	#</Proxy>
  	#ProxyPass     /idcapture  balancer://idc1cluster/idcapture stickysession=IDC_SESSION|idc_session nofailover=On #scolonpathdelim=On
  	#ProxyPassReverse  /idcapture  https://10.45.235.144:8443/idcapture
	
	#ProxyPass /idcapture/doccaptureui https://10.45.217.11:8443/doccaptureui
	#ProxyPassReverse /idcapture/doccaptureui https://10.45.217.11:8443/doccaptureui
	
	#ProxyPass /idcapture/doccaptureapi https://10.45.235.144:7443/doccaptureapi
	#ProxyPassReverse /idcapture/doccaptureapi https://10.45.235.144:7443/doccaptureapi
	
	#ProxyPass /idcapture https://10.45.235.144:8443/idcapture
	#ProxyPassReverse  /idcapture  https://10.45.235.144:8443/idcapture

	#ProxyPass /idcapture https://wuidcapturewebappqa1.qawesternunion.com/idcapture
	#ProxyPassReverse /idcapture https://wuidcapturewebappqa1.qawesternunion.com/idcapture

	#ProxyPass /idcapture https://wuidcapture.rom.cmtprod.awswuintranet.net/idcapture
	#ProxyPassReverse /idcapture https://wuidcapture.rom.cmtprod.awswuintranet.net/idcapture

        #ProxyPass /idcapture https://wuidcapture.prod.nv.cmtprod.awswuintranet.net/idcapture
        #ProxyPassReverse /idcapture https://wuidcapture.prod.nv.cmtprod.awswuintranet.net/idcapture

 	ProxyPass /idcapture https://wuidcapture-qa1.cmtnonprod.awswuintranet.net/idcapture
	ProxyPassReverse /idcapture https://wuidcapture-qa1.cmtnonprod.awswuintranet.net/idcapture

	#ProxyPass /volumedashboard-service  https://wupos-vdb.qa.cmtnonprod.awswuintranet.net/volumedashboard-service
	#ProxyPassReverse /volumedashboard-service https://wupos-vdb.qa.cmtnonprod.awswuintranet.net/volumedashboard-service 
	
	
    ProxyPass /volumedashboard https://wupos-vdb.qa.cmtnonprod.awswuintranet.net/volumedashboard
	ProxyPassReverse /volumedashboard https://wupos-vdb.qa.cmtnonprod.awswuintranet.net/volumedashboard 

	ProxyPass /volumedashboard-service  https://wupos-vdb.qa.cmtnonprod.awswuintranet.net/volumedashboard-service
	ProxyPassReverse /volumedashboard-service https://wupos-vdb.qa.cmtnonprod.awswuintranet.net/volumedashboard-service
	
	#ProxyPass /volumedashboard-service https://10.45.235.176:8680/volumedashboard-service
	#ProxyPassReverse /volumedashboard-service https://10.45.235.176:8680/volumedashboard-service

	#ProxyPass /GMTClient https://gmtqa.wuintranet.net/GMT_Client
	#ProxyPassReverse /GMTClient https://gmtqa.wuintranet.net/GMT_Client

	#ProxyPass /GMT_Services https://gmtqa.wuintranet.net/GMT_Services
	#ProxyPassReverse /GMT_Services https://gmtqa.wuintranet.net/GMT_Services
	ProxyPass /GMTClient https://transvision.qawesternunion.com/GMTClient
	ProxyPassReverse /GMTClient https://transvision.qawesternunion.com/GMTClient
	ProxyPass /GMTServices https://transvision.qawesternunion.com/GMTServices
	ProxyPassReverse /GMTServices https://transvision.qawesternunion.com/GMTServices
  
  
				
				
	ProxyPass /apac https://coreyrevuatprxy.prod.wudip.com/wuchatcare/apac
	ProxyPassReverse /apac https://coreyrevuatprxy.prod.wudip.com/wuchatcare/apac

	ProxyPass /ec https://coreyrevuatprxy.prod.wudip.com/wuchatcare/ec
	ProxyPassReverse /ec https://coreyrevuatprxy.prod.wudip.com/wuchatcare/ec

	ProxyPass /italy https://coreyrevuatprxy.prod.wudip.com/wuchatcare/italy
	ProxyPassReverse /italy https://coreyrevuatprxy.prod.wudip.com/wuchatcare/italy

	ProxyPass /laca https://coreyrevuatprxy.prod.wudip.com/wuchatcare/laca
	ProxyPassReverse /laca https://coreyrevuatprxy.prod.wudip.com/wuchatcare/laca

	ProxyPass /middleeast  https://coreyrevuatprxy.prod.wudip.com/wuchatcare/middleeast
	ProxyPassReverse /middleeast https://coreyrevuatprxy.prod.wudip.com/wuchatcare/middleeast

	ProxyPass /nam  https://coreyrevuatprxy.prod.wudip.com/wuchatcare/nam
	ProxyPassReverse /nam https://coreyrevuatprxy.prod.wudip.com/wuchatcare/nam

	ProxyPass /ovv https://coreyrevuatprxy.prod.wudip.com/wuchatcare/ovv
	ProxyPassReverse /ovv https://coreyrevuatprxy.prod.wudip.com/wuchatcare/ovv

	ProxyPass /usest  https://coreyrevuatprxy.prod.wudip.com/wuchatcare/usest
	ProxyPassReverse /usest https://coreyrevuatprxy.prod.wudip.com/wuchatcare/usest

	ProxyPass /uscst https://coreyrevuatprxy.prod.wudip.com/wuchatcare/uscst
	ProxyPassReverse /uscst https://coreyrevuatprxy.prod.wudip.com/wuchatcare/uscst

	ProxyPass /uspst https://coreyrevuatprxy.prod.wudip.com/wuchatcare/uspst
	ProxyPassReverse /uspst https://coreyrevuatprxy.prod.wudip.com/wuchatcare/uspst

	ProxyPass /us  https://coreyrevuatprxy.prod.wudip.com/wuchatcare/us
	ProxyPassReverse /us https://coreyrevuatprxy.prod.wudip.com/wuchatcare/us

	ProxyPass /care https://coreyrevuatprxy.prod.wudip.com/care
	ProxyPassReverse /care https://coreyrevuatprxy.prod.wudip.com/care
	ProxyPass /terms https://coreyrevuatprxy.prod.wudip.com/terms
	ProxyPassReverse /terms https://coreyrevuatprxy.prod.wudip.com/terms

	ProxyPass /faces https://coreyrevuatprxy.prod.wudip.com/wuchatcare/faces
	ProxyPassReverse /faces https://coreyrevuatprxy.prod.wudip.com/wuchatcare/faces

	ProxyPass /javascript https://coreyrevuatprxy.prod.wudip.com/wuchatcare/javascript
	ProxyPassReverse /javascript https://coreyrevuatprxy.prod.wudip.com/wuchatcare/javascript                             
		 
		 
                               
	SSLOptions +StdEnvVars +ExportCertData +StrictRequire

	#   SSL Engine Switch:
	#   Enable/Disable SSL for this virtual host.
	SSLEngine on
        SSLProtocol -all +TLSv1.2

	#   SSL Cipher Suite:
	#   List the ciphers that the client is permitted to negotiate.
	#   See the mod_ssl documentation for a complete list.
        #SSLCipherSuite HIGH:MEDIUM:!aNULL:+SHA1:+MD5:+HIGH:+MEDIUM
	#SSLCipherSuite ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
	SSLCipherSuite HIGH:!MEDIUM:!aNULL:!MD5:!RC4
        #   Server Certificate:
	#   Point SSLCertificateFile at a PEM encoded certificate.  If
	#   the certificate is encrypted, then you will be prompted for a
	#   pass phrase.  Note that a kill -HUP will prompt again.  Keep
	#   in mind that if you have both an RSA and a DSA certificate you
	#   can configure both in parallel (to also allow the use of DSA
	#   ciphers, etc.)
        SSLCertificateFile /etc/httpd/conf/ssl.crt/server.crt

	#   Server Private Key:
	#   If the key is not combined with the certificate, use this
	#   directive to point at the key file.  Keep in mind that if
	#   you've both a RSA and a DSA private key you can configure
	#   both in parallel (to also allow the use of DSA ciphers, etc.)
        SSLCertificateKeyFile /etc/httpd/conf/ssl.key/server.key

	#   Server Certificate Chain:
	#   Point SSLCertificateChainFile at a file containing the
	#   concatenation of PEM encoded CA certificates which form the
	#   certificate chain for the server certificate. Alternatively
	#   the referenced file can be the same as SSLCertificateFile
	#   when the CA certificates are directly appended to the server
	#   certificate for convinience.
	#SSLCertificateChainFile /etc/httpd/ssl.crt/ca.crt

	#   Certificate Authority (CA):
	#   Set the CA certificate verification path where to find CA
	#   certificates for client authentication or alternatively one
	#   huge file containing all of them (file must be PEM encoded)
	#   Note: Inside SSLCACertificatePath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	#SSLCACertificatePath /apps/apache2/conf/ssl.crt
	#SSLCACertificateFile /etc/httpd/ssl.crt/ca-bundle.crt

	#   Certificate Revocation Lists (CRL):
	#   Set the CA revocation path where to find CA CRLs for client
	#   authentication or alternatively one huge file containing all
	#   of them (file must be PEM encoded)
	#   Note: Inside SSLCARevocationPath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	#SSLCARevocationPath /apps/apache2/conf/ssl.crl
	#SSLCARevocationFile /apps/apache2/conf/ssl.crl/ca-bundle.crl

	#   Client Authentication (Type):
	#   Client certificate verification type and depth.  Types are
	#   none, optional, require and optional_no_ca.  Depth is a
	#   number which specifies how deeply to verify the certificate
	#   issuer chain before deciding the certificate is not valid.
	#SSLVerifyClient require
	#SSLVerifyDepth  10

	#   Access Control:
	#   With SSLRequire you can do per-directory access control based
	#   on arbitrary complex boolean expressions containing server
	#   variable checks and other lookup directives.  The syntax is a
	#   mixture between C and Perl.  See the mod_ssl documentation
	#   for more details.
	#<Location />
	#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
	#            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
	#            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
	#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
	#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
	#           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
	#</Location>

	#   SSL Engine Options:
	#   Set various options for the SSL engine.
	#   o FakeBasicAuth:
	#     Translate the client X.509 into a Basic Authorisation.  This means that
	#     the standard Auth/DBMAuth methods can be used for access control.  The
	#     user name is the `one line' version of the client's X.509 certificate.
	#     Note that no password is obtained from the user. Every entry in the user
	#     file needs this password: `xxj31ZMTZzkVA'.
	#   o ExportCertData:
	#     This exports two additional environment variables: SSL_CLIENT_CERT and
	#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
	#     server (always existing) and the client (only existing when client
	#     authentication is used). This can be used to import the certificates
	#     into CGI scripts.
	#   o StdEnvVars:
	#     This exports the standard SSL/TLS related `SSL_*' environment variables.
	#     Per default this exportation is switched off for performance reasons,
	#     because the extraction step is an expensive operation and is usually
	#     useless for serving static content. So one usually enables the
	#     exportation for CGI and SSI requests only.
	#   o CompatEnvVars:
	#     This exports obsolete environment variables for backward compatibility
	#     to Apache-SSL 1.x, mod_ssl 2.0.x, Sioux 1.0 and Stronghold 2.x. Use this
	#     to provide compatibility to existing CGI scripts.
	#   o StrictRequire:
	#     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
	#     under a "Satisfy any" situation, i.e. when it applies access is denied
	#     and no other module can change it.
	#   o OptRenegotiate:
	#     This enables optimized SSL connection renegotiation handling when SSL
	#     directives are used in per-directory context. 
	#SSLOptions +FakeBasicAuth +ExportCertData +CompatEnvVars +StrictRequire
	#<Files ~ "\.(cgi|shtml|phtml|php3?)$">
	#    SSLOptions +StdEnvVars
	#</Files>
	#<Directory "/srv/www/cgi-bin">
	#    SSLOptions +StdEnvVars
	#</Directory>

	#   SSL Protocol Adjustments:
	#   The safe and default but still SSL/TLS standard compliant shutdown
	#   approach is that mod_ssl sends the close notify alert but doesn't wait for
	#   the close notify alert from client. When you need a different shutdown
	#   approach you can use one of the following variables:
	#   o ssl-unclean-shutdown:
	#     This forces an unclean shutdown when the connection is closed, i.e. no
	#     SSL close notify alert is send or allowed to received.  This violates
	#     the SSL/TLS standard but is needed for some brain-dead browsers. Use
	#     this when you receive I/O errors because of the standard approach where
	#     mod_ssl sends the close notify alert.
	#   o ssl-accurate-shutdown:
	#     This forces an accurate shutdown when the connection is closed, i.e. a
	#     SSL close notify alert is send and mod_ssl waits for the close notify
	#     alert of the client. This is 100% SSL/TLS standard compliant, but in
	#     practice often causes hanging connections with brain-dead browsers. Use
	#     this only for browsers where you know that their SSL implementation
	#     works correctly. 
	#   Notice: Most problems of broken clients are also related to the HTTP
	#   keep-alive facility, so you usually additionally want to disable
	#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
	#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
	#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
	#   "force-response-1.0" for this.
#	SetEnvIf User-Agent ".*MSIE.*" \
#		 nokeepalive ssl-unclean-shutdown \
#		 downgrade-1.0 force-response-1.0

        SetEnvIf User-Agent ".*MSIE [1-5].*" \
             nokeepalive ssl-unclean-shutdown \
             downgrade-1.0 force-response-1.0

        SetEnvIf User-Agent ".*MSIE [6-9].*" \
             ssl-unclean-shutdown

</VirtualHost>

ServerTokens Prod
